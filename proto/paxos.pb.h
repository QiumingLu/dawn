// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos.proto

#ifndef PROTOBUF_paxos_2eproto__INCLUDED
#define PROTOBUF_paxos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace skywalker {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_paxos_2eproto();
void protobuf_InitDefaults_paxos_2eproto();
void protobuf_AssignDesc_paxos_2eproto();
void protobuf_ShutdownFile_paxos_2eproto();

class AcceptorState;
class CheckPointMessage;
class Content;
class MasterState;
class Membership;
class PaxosMessage;
class PaxosValue;

enum MessageType {
  PREPARE = 0,
  PREPARE_REPLY = 1,
  ACCEPT = 2,
  ACCEPT_REPLY = 3,
  NEW_CHOSEN_VALUE = 4,
  ASK_FOR_LEARN = 5,
  SEND_LEARNED_VALUE = 6,
  SEND_NOW_INSTANCE_ID = 7,
  COMFIRM_ASK_FOR_LEARN = 8,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = PREPARE;
const MessageType MessageType_MAX = COMFIRM_ASK_FOR_LEARN;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ContentType {
  PAXOS_MESSAGE = 0,
  CHECKPOINT_MESSAGE = 1,
  ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContentType_IsValid(int value);
const ContentType ContentType_MIN = PAXOS_MESSAGE;
const ContentType ContentType_MAX = CHECKPOINT_MESSAGE;
const int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContentType_descriptor();
inline const ::std::string& ContentType_Name(ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContentType_descriptor(), value);
}
inline bool ContentType_Parse(
    const ::std::string& name, ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContentType>(
    ContentType_descriptor(), name, value);
}
// ===================================================================

class PaxosValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.PaxosValue) */ {
 public:
  PaxosValue();
  virtual ~PaxosValue();

  PaxosValue(const PaxosValue& from);

  inline PaxosValue& operator=(const PaxosValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaxosValue& default_instance();

  static const PaxosValue* internal_default_instance();

  void Swap(PaxosValue* other);

  // implements Message ----------------------------------------------

  inline PaxosValue* New() const { return New(NULL); }

  PaxosValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaxosValue& from);
  void MergeFrom(const PaxosValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaxosValue* other);
  void UnsafeMergeFrom(const PaxosValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 machine_id = 1;
  void clear_machine_id();
  static const int kMachineIdFieldNumber = 1;
  ::google::protobuf::int32 machine_id() const;
  void set_machine_id(::google::protobuf::int32 value);

  // optional bytes user_data = 2;
  void clear_user_data();
  static const int kUserDataFieldNumber = 2;
  const ::std::string& user_data() const;
  void set_user_data(const ::std::string& value);
  void set_user_data(const char* value);
  void set_user_data(const void* value, size_t size);
  ::std::string* mutable_user_data();
  ::std::string* release_user_data();
  void set_allocated_user_data(::std::string* user_data);

  // @@protoc_insertion_point(class_scope:skywalker.PaxosValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_data_;
  ::google::protobuf::int32 machine_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PaxosValue> PaxosValue_default_instance_;

// -------------------------------------------------------------------

class PaxosMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.PaxosMessage) */ {
 public:
  PaxosMessage();
  virtual ~PaxosMessage();

  PaxosMessage(const PaxosMessage& from);

  inline PaxosMessage& operator=(const PaxosMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaxosMessage& default_instance();

  static const PaxosMessage* internal_default_instance();

  void Swap(PaxosMessage* other);

  // implements Message ----------------------------------------------

  inline PaxosMessage* New() const { return New(NULL); }

  PaxosMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaxosMessage& from);
  void MergeFrom(const PaxosMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaxosMessage* other);
  void UnsafeMergeFrom(const PaxosMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .skywalker.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::skywalker::MessageType type() const;
  void set_type(::skywalker::MessageType value);

  // optional uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // optional uint64 instance_id = 3;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 3;
  ::google::protobuf::uint64 instance_id() const;
  void set_instance_id(::google::protobuf::uint64 value);

  // optional uint64 proposal_id = 4;
  void clear_proposal_id();
  static const int kProposalIdFieldNumber = 4;
  ::google::protobuf::uint64 proposal_id() const;
  void set_proposal_id(::google::protobuf::uint64 value);

  // optional uint64 proposal_node_id = 5;
  void clear_proposal_node_id();
  static const int kProposalNodeIdFieldNumber = 5;
  ::google::protobuf::uint64 proposal_node_id() const;
  void set_proposal_node_id(::google::protobuf::uint64 value);

  // optional uint64 pre_accepted_id = 6;
  void clear_pre_accepted_id();
  static const int kPreAcceptedIdFieldNumber = 6;
  ::google::protobuf::uint64 pre_accepted_id() const;
  void set_pre_accepted_id(::google::protobuf::uint64 value);

  // optional uint64 pre_accepted_node_id = 7;
  void clear_pre_accepted_node_id();
  static const int kPreAcceptedNodeIdFieldNumber = 7;
  ::google::protobuf::uint64 pre_accepted_node_id() const;
  void set_pre_accepted_node_id(::google::protobuf::uint64 value);

  // optional uint64 rejected_id = 8;
  void clear_rejected_id();
  static const int kRejectedIdFieldNumber = 8;
  ::google::protobuf::uint64 rejected_id() const;
  void set_rejected_id(::google::protobuf::uint64 value);

  // optional uint64 now_instance_id = 9;
  void clear_now_instance_id();
  static const int kNowInstanceIdFieldNumber = 9;
  ::google::protobuf::uint64 now_instance_id() const;
  void set_now_instance_id(::google::protobuf::uint64 value);

  // optional .skywalker.PaxosValue value = 10;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 10;
  const ::skywalker::PaxosValue& value() const;
  ::skywalker::PaxosValue* mutable_value();
  ::skywalker::PaxosValue* release_value();
  void set_allocated_value(::skywalker::PaxosValue* value);

  // @@protoc_insertion_point(class_scope:skywalker.PaxosMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::skywalker::PaxosValue* value_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 instance_id_;
  ::google::protobuf::uint64 proposal_id_;
  ::google::protobuf::uint64 proposal_node_id_;
  ::google::protobuf::uint64 pre_accepted_id_;
  ::google::protobuf::uint64 pre_accepted_node_id_;
  ::google::protobuf::uint64 rejected_id_;
  ::google::protobuf::uint64 now_instance_id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PaxosMessage> PaxosMessage_default_instance_;

// -------------------------------------------------------------------

class CheckPointMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.CheckPointMessage) */ {
 public:
  CheckPointMessage();
  virtual ~CheckPointMessage();

  CheckPointMessage(const CheckPointMessage& from);

  inline CheckPointMessage& operator=(const CheckPointMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPointMessage& default_instance();

  static const CheckPointMessage* internal_default_instance();

  void Swap(CheckPointMessage* other);

  // implements Message ----------------------------------------------

  inline CheckPointMessage* New() const { return New(NULL); }

  CheckPointMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckPointMessage& from);
  void MergeFrom(const CheckPointMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckPointMessage* other);
  void UnsafeMergeFrom(const CheckPointMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .skywalker.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::skywalker::MessageType type() const;
  void set_type(::skywalker::MessageType value);

  // @@protoc_insertion_point(class_scope:skywalker.CheckPointMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckPointMessage> CheckPointMessage_default_instance_;

// -------------------------------------------------------------------

class Content : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.Content) */ {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  static const Content* internal_default_instance();

  void Swap(Content* other);

  // implements Message ----------------------------------------------

  inline Content* New() const { return New(NULL); }

  Content* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Content* other);
  void UnsafeMergeFrom(const Content& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .skywalker.ContentType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::skywalker::ContentType type() const;
  void set_type(::skywalker::ContentType value);

  // optional uint32 group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // optional uint32 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .skywalker.PaxosMessage paxos_msg = 4;
  bool has_paxos_msg() const;
  void clear_paxos_msg();
  static const int kPaxosMsgFieldNumber = 4;
  const ::skywalker::PaxosMessage& paxos_msg() const;
  ::skywalker::PaxosMessage* mutable_paxos_msg();
  ::skywalker::PaxosMessage* release_paxos_msg();
  void set_allocated_paxos_msg(::skywalker::PaxosMessage* paxos_msg);

  // optional .skywalker.CheckPointMessage checkpoint_msg = 5;
  bool has_checkpoint_msg() const;
  void clear_checkpoint_msg();
  static const int kCheckpointMsgFieldNumber = 5;
  const ::skywalker::CheckPointMessage& checkpoint_msg() const;
  ::skywalker::CheckPointMessage* mutable_checkpoint_msg();
  ::skywalker::CheckPointMessage* release_checkpoint_msg();
  void set_allocated_checkpoint_msg(::skywalker::CheckPointMessage* checkpoint_msg);

  // @@protoc_insertion_point(class_scope:skywalker.Content)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::skywalker::PaxosMessage* paxos_msg_;
  ::skywalker::CheckPointMessage* checkpoint_msg_;
  int type_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Content> Content_default_instance_;

// -------------------------------------------------------------------

class Membership : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.Membership) */ {
 public:
  Membership();
  virtual ~Membership();

  Membership(const Membership& from);

  inline Membership& operator=(const Membership& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Membership& default_instance();

  static const Membership* internal_default_instance();

  void Swap(Membership* other);

  // implements Message ----------------------------------------------

  inline Membership* New() const { return New(NULL); }

  Membership* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Membership& from);
  void MergeFrom(const Membership& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Membership* other);
  void UnsafeMergeFrom(const Membership& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // repeated uint64 node_id = 2;
  int node_id_size() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id(int index) const;
  void set_node_id(int index, ::google::protobuf::uint64 value);
  void add_node_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      node_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_node_id();

  // @@protoc_insertion_point(class_scope:skywalker.Membership)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > node_id_;
  mutable int _node_id_cached_byte_size_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Membership> Membership_default_instance_;

// -------------------------------------------------------------------

class AcceptorState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.AcceptorState) */ {
 public:
  AcceptorState();
  virtual ~AcceptorState();

  AcceptorState(const AcceptorState& from);

  inline AcceptorState& operator=(const AcceptorState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptorState& default_instance();

  static const AcceptorState* internal_default_instance();

  void Swap(AcceptorState* other);

  // implements Message ----------------------------------------------

  inline AcceptorState* New() const { return New(NULL); }

  AcceptorState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptorState& from);
  void MergeFrom(const AcceptorState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AcceptorState* other);
  void UnsafeMergeFrom(const AcceptorState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::uint64 instance_id() const;
  void set_instance_id(::google::protobuf::uint64 value);

  // optional uint64 promised_id = 2;
  void clear_promised_id();
  static const int kPromisedIdFieldNumber = 2;
  ::google::protobuf::uint64 promised_id() const;
  void set_promised_id(::google::protobuf::uint64 value);

  // optional uint64 promised_node_id = 3;
  void clear_promised_node_id();
  static const int kPromisedNodeIdFieldNumber = 3;
  ::google::protobuf::uint64 promised_node_id() const;
  void set_promised_node_id(::google::protobuf::uint64 value);

  // optional uint64 accepted_id = 4;
  void clear_accepted_id();
  static const int kAcceptedIdFieldNumber = 4;
  ::google::protobuf::uint64 accepted_id() const;
  void set_accepted_id(::google::protobuf::uint64 value);

  // optional uint64 accepted_node_id = 5;
  void clear_accepted_node_id();
  static const int kAcceptedNodeIdFieldNumber = 5;
  ::google::protobuf::uint64 accepted_node_id() const;
  void set_accepted_node_id(::google::protobuf::uint64 value);

  // optional .skywalker.PaxosValue accepted_value = 6;
  bool has_accepted_value() const;
  void clear_accepted_value();
  static const int kAcceptedValueFieldNumber = 6;
  const ::skywalker::PaxosValue& accepted_value() const;
  ::skywalker::PaxosValue* mutable_accepted_value();
  ::skywalker::PaxosValue* release_accepted_value();
  void set_allocated_accepted_value(::skywalker::PaxosValue* accepted_value);

  // @@protoc_insertion_point(class_scope:skywalker.AcceptorState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::skywalker::PaxosValue* accepted_value_;
  ::google::protobuf::uint64 instance_id_;
  ::google::protobuf::uint64 promised_id_;
  ::google::protobuf::uint64 promised_node_id_;
  ::google::protobuf::uint64 accepted_id_;
  ::google::protobuf::uint64 accepted_node_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AcceptorState> AcceptorState_default_instance_;

// -------------------------------------------------------------------

class MasterState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:skywalker.MasterState) */ {
 public:
  MasterState();
  virtual ~MasterState();

  MasterState(const MasterState& from);

  inline MasterState& operator=(const MasterState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterState& default_instance();

  static const MasterState* internal_default_instance();

  void Swap(MasterState* other);

  // implements Message ----------------------------------------------

  inline MasterState* New() const { return New(NULL); }

  MasterState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterState& from);
  void MergeFrom(const MasterState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterState* other);
  void UnsafeMergeFrom(const MasterState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // optional uint64 lease_time = 3;
  void clear_lease_time();
  static const int kLeaseTimeFieldNumber = 3;
  ::google::protobuf::uint64 lease_time() const;
  void set_lease_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:skywalker.MasterState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 lease_time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_paxos_2eproto_impl();
  friend void  protobuf_AddDesc_paxos_2eproto_impl();
  friend void protobuf_AssignDesc_paxos_2eproto();
  friend void protobuf_ShutdownFile_paxos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MasterState> MasterState_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PaxosValue

// optional int32 machine_id = 1;
inline void PaxosValue::clear_machine_id() {
  machine_id_ = 0;
}
inline ::google::protobuf::int32 PaxosValue::machine_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosValue.machine_id)
  return machine_id_;
}
inline void PaxosValue::set_machine_id(::google::protobuf::int32 value) {
  
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosValue.machine_id)
}

// optional bytes user_data = 2;
inline void PaxosValue::clear_user_data() {
  user_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PaxosValue::user_data() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosValue.user_data)
  return user_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PaxosValue::set_user_data(const ::std::string& value) {
  
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywalker.PaxosValue.user_data)
}
inline void PaxosValue::set_user_data(const char* value) {
  
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywalker.PaxosValue.user_data)
}
inline void PaxosValue::set_user_data(const void* value, size_t size) {
  
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywalker.PaxosValue.user_data)
}
inline ::std::string* PaxosValue::mutable_user_data() {
  
  // @@protoc_insertion_point(field_mutable:skywalker.PaxosValue.user_data)
  return user_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PaxosValue::release_user_data() {
  // @@protoc_insertion_point(field_release:skywalker.PaxosValue.user_data)
  
  return user_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PaxosValue::set_allocated_user_data(::std::string* user_data) {
  if (user_data != NULL) {
    
  } else {
    
  }
  user_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_data);
  // @@protoc_insertion_point(field_set_allocated:skywalker.PaxosValue.user_data)
}

inline const PaxosValue* PaxosValue::internal_default_instance() {
  return &PaxosValue_default_instance_.get();
}
// -------------------------------------------------------------------

// PaxosMessage

// optional .skywalker.MessageType type = 1;
inline void PaxosMessage::clear_type() {
  type_ = 0;
}
inline ::skywalker::MessageType PaxosMessage::type() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.type)
  return static_cast< ::skywalker::MessageType >(type_);
}
inline void PaxosMessage::set_type(::skywalker::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.type)
}

// optional uint64 node_id = 2;
inline void PaxosMessage::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.node_id)
  return node_id_;
}
inline void PaxosMessage::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.node_id)
}

// optional uint64 instance_id = 3;
inline void PaxosMessage::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::instance_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.instance_id)
  return instance_id_;
}
inline void PaxosMessage::set_instance_id(::google::protobuf::uint64 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.instance_id)
}

// optional uint64 proposal_id = 4;
inline void PaxosMessage::clear_proposal_id() {
  proposal_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::proposal_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.proposal_id)
  return proposal_id_;
}
inline void PaxosMessage::set_proposal_id(::google::protobuf::uint64 value) {
  
  proposal_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.proposal_id)
}

// optional uint64 proposal_node_id = 5;
inline void PaxosMessage::clear_proposal_node_id() {
  proposal_node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::proposal_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.proposal_node_id)
  return proposal_node_id_;
}
inline void PaxosMessage::set_proposal_node_id(::google::protobuf::uint64 value) {
  
  proposal_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.proposal_node_id)
}

// optional uint64 pre_accepted_id = 6;
inline void PaxosMessage::clear_pre_accepted_id() {
  pre_accepted_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::pre_accepted_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.pre_accepted_id)
  return pre_accepted_id_;
}
inline void PaxosMessage::set_pre_accepted_id(::google::protobuf::uint64 value) {
  
  pre_accepted_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.pre_accepted_id)
}

// optional uint64 pre_accepted_node_id = 7;
inline void PaxosMessage::clear_pre_accepted_node_id() {
  pre_accepted_node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::pre_accepted_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.pre_accepted_node_id)
  return pre_accepted_node_id_;
}
inline void PaxosMessage::set_pre_accepted_node_id(::google::protobuf::uint64 value) {
  
  pre_accepted_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.pre_accepted_node_id)
}

// optional uint64 rejected_id = 8;
inline void PaxosMessage::clear_rejected_id() {
  rejected_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::rejected_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.rejected_id)
  return rejected_id_;
}
inline void PaxosMessage::set_rejected_id(::google::protobuf::uint64 value) {
  
  rejected_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.rejected_id)
}

// optional uint64 now_instance_id = 9;
inline void PaxosMessage::clear_now_instance_id() {
  now_instance_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaxosMessage::now_instance_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.now_instance_id)
  return now_instance_id_;
}
inline void PaxosMessage::set_now_instance_id(::google::protobuf::uint64 value) {
  
  now_instance_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.now_instance_id)
}

// optional .skywalker.PaxosValue value = 10;
inline bool PaxosMessage::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void PaxosMessage::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::skywalker::PaxosValue& PaxosMessage::value() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.value)
  return value_ != NULL ? *value_
                         : *::skywalker::PaxosValue::internal_default_instance();
}
inline ::skywalker::PaxosValue* PaxosMessage::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::skywalker::PaxosValue;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.PaxosMessage.value)
  return value_;
}
inline ::skywalker::PaxosValue* PaxosMessage::release_value() {
  // @@protoc_insertion_point(field_release:skywalker.PaxosMessage.value)
  
  ::skywalker::PaxosValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void PaxosMessage::set_allocated_value(::skywalker::PaxosValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.PaxosMessage.value)
}

inline const PaxosMessage* PaxosMessage::internal_default_instance() {
  return &PaxosMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckPointMessage

// optional .skywalker.MessageType type = 1;
inline void CheckPointMessage::clear_type() {
  type_ = 0;
}
inline ::skywalker::MessageType CheckPointMessage::type() const {
  // @@protoc_insertion_point(field_get:skywalker.CheckPointMessage.type)
  return static_cast< ::skywalker::MessageType >(type_);
}
inline void CheckPointMessage::set_type(::skywalker::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:skywalker.CheckPointMessage.type)
}

inline const CheckPointMessage* CheckPointMessage::internal_default_instance() {
  return &CheckPointMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// Content

// optional .skywalker.ContentType type = 1;
inline void Content::clear_type() {
  type_ = 0;
}
inline ::skywalker::ContentType Content::type() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.type)
  return static_cast< ::skywalker::ContentType >(type_);
}
inline void Content::set_type(::skywalker::ContentType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Content.type)
}

// optional uint32 group_id = 2;
inline void Content::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 Content::group_id() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.group_id)
  return group_id_;
}
inline void Content::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Content.group_id)
}

// optional uint32 version = 3;
inline void Content::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Content::version() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.version)
  return version_;
}
inline void Content::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Content.version)
}

// optional .skywalker.PaxosMessage paxos_msg = 4;
inline bool Content::has_paxos_msg() const {
  return this != internal_default_instance() && paxos_msg_ != NULL;
}
inline void Content::clear_paxos_msg() {
  if (GetArenaNoVirtual() == NULL && paxos_msg_ != NULL) delete paxos_msg_;
  paxos_msg_ = NULL;
}
inline const ::skywalker::PaxosMessage& Content::paxos_msg() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.paxos_msg)
  return paxos_msg_ != NULL ? *paxos_msg_
                         : *::skywalker::PaxosMessage::internal_default_instance();
}
inline ::skywalker::PaxosMessage* Content::mutable_paxos_msg() {
  
  if (paxos_msg_ == NULL) {
    paxos_msg_ = new ::skywalker::PaxosMessage;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.Content.paxos_msg)
  return paxos_msg_;
}
inline ::skywalker::PaxosMessage* Content::release_paxos_msg() {
  // @@protoc_insertion_point(field_release:skywalker.Content.paxos_msg)
  
  ::skywalker::PaxosMessage* temp = paxos_msg_;
  paxos_msg_ = NULL;
  return temp;
}
inline void Content::set_allocated_paxos_msg(::skywalker::PaxosMessage* paxos_msg) {
  delete paxos_msg_;
  paxos_msg_ = paxos_msg;
  if (paxos_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.Content.paxos_msg)
}

// optional .skywalker.CheckPointMessage checkpoint_msg = 5;
inline bool Content::has_checkpoint_msg() const {
  return this != internal_default_instance() && checkpoint_msg_ != NULL;
}
inline void Content::clear_checkpoint_msg() {
  if (GetArenaNoVirtual() == NULL && checkpoint_msg_ != NULL) delete checkpoint_msg_;
  checkpoint_msg_ = NULL;
}
inline const ::skywalker::CheckPointMessage& Content::checkpoint_msg() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.checkpoint_msg)
  return checkpoint_msg_ != NULL ? *checkpoint_msg_
                         : *::skywalker::CheckPointMessage::internal_default_instance();
}
inline ::skywalker::CheckPointMessage* Content::mutable_checkpoint_msg() {
  
  if (checkpoint_msg_ == NULL) {
    checkpoint_msg_ = new ::skywalker::CheckPointMessage;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.Content.checkpoint_msg)
  return checkpoint_msg_;
}
inline ::skywalker::CheckPointMessage* Content::release_checkpoint_msg() {
  // @@protoc_insertion_point(field_release:skywalker.Content.checkpoint_msg)
  
  ::skywalker::CheckPointMessage* temp = checkpoint_msg_;
  checkpoint_msg_ = NULL;
  return temp;
}
inline void Content::set_allocated_checkpoint_msg(::skywalker::CheckPointMessage* checkpoint_msg) {
  delete checkpoint_msg_;
  checkpoint_msg_ = checkpoint_msg;
  if (checkpoint_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.Content.checkpoint_msg)
}

inline const Content* Content::internal_default_instance() {
  return &Content_default_instance_.get();
}
// -------------------------------------------------------------------

// Membership

// optional uint64 version = 1;
inline void Membership::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Membership::version() const {
  // @@protoc_insertion_point(field_get:skywalker.Membership.version)
  return version_;
}
inline void Membership::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Membership.version)
}

// repeated uint64 node_id = 2;
inline int Membership::node_id_size() const {
  return node_id_.size();
}
inline void Membership::clear_node_id() {
  node_id_.Clear();
}
inline ::google::protobuf::uint64 Membership::node_id(int index) const {
  // @@protoc_insertion_point(field_get:skywalker.Membership.node_id)
  return node_id_.Get(index);
}
inline void Membership::set_node_id(int index, ::google::protobuf::uint64 value) {
  node_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:skywalker.Membership.node_id)
}
inline void Membership::add_node_id(::google::protobuf::uint64 value) {
  node_id_.Add(value);
  // @@protoc_insertion_point(field_add:skywalker.Membership.node_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Membership::node_id() const {
  // @@protoc_insertion_point(field_list:skywalker.Membership.node_id)
  return node_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Membership::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable_list:skywalker.Membership.node_id)
  return &node_id_;
}

inline const Membership* Membership::internal_default_instance() {
  return &Membership_default_instance_.get();
}
// -------------------------------------------------------------------

// AcceptorState

// optional uint64 instance_id = 1;
inline void AcceptorState::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptorState::instance_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.instance_id)
  return instance_id_;
}
inline void AcceptorState::set_instance_id(::google::protobuf::uint64 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.instance_id)
}

// optional uint64 promised_id = 2;
inline void AcceptorState::clear_promised_id() {
  promised_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptorState::promised_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.promised_id)
  return promised_id_;
}
inline void AcceptorState::set_promised_id(::google::protobuf::uint64 value) {
  
  promised_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.promised_id)
}

// optional uint64 promised_node_id = 3;
inline void AcceptorState::clear_promised_node_id() {
  promised_node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptorState::promised_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.promised_node_id)
  return promised_node_id_;
}
inline void AcceptorState::set_promised_node_id(::google::protobuf::uint64 value) {
  
  promised_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.promised_node_id)
}

// optional uint64 accepted_id = 4;
inline void AcceptorState::clear_accepted_id() {
  accepted_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptorState::accepted_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.accepted_id)
  return accepted_id_;
}
inline void AcceptorState::set_accepted_id(::google::protobuf::uint64 value) {
  
  accepted_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.accepted_id)
}

// optional uint64 accepted_node_id = 5;
inline void AcceptorState::clear_accepted_node_id() {
  accepted_node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptorState::accepted_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.accepted_node_id)
  return accepted_node_id_;
}
inline void AcceptorState::set_accepted_node_id(::google::protobuf::uint64 value) {
  
  accepted_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.accepted_node_id)
}

// optional .skywalker.PaxosValue accepted_value = 6;
inline bool AcceptorState::has_accepted_value() const {
  return this != internal_default_instance() && accepted_value_ != NULL;
}
inline void AcceptorState::clear_accepted_value() {
  if (GetArenaNoVirtual() == NULL && accepted_value_ != NULL) delete accepted_value_;
  accepted_value_ = NULL;
}
inline const ::skywalker::PaxosValue& AcceptorState::accepted_value() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.accepted_value)
  return accepted_value_ != NULL ? *accepted_value_
                         : *::skywalker::PaxosValue::internal_default_instance();
}
inline ::skywalker::PaxosValue* AcceptorState::mutable_accepted_value() {
  
  if (accepted_value_ == NULL) {
    accepted_value_ = new ::skywalker::PaxosValue;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.AcceptorState.accepted_value)
  return accepted_value_;
}
inline ::skywalker::PaxosValue* AcceptorState::release_accepted_value() {
  // @@protoc_insertion_point(field_release:skywalker.AcceptorState.accepted_value)
  
  ::skywalker::PaxosValue* temp = accepted_value_;
  accepted_value_ = NULL;
  return temp;
}
inline void AcceptorState::set_allocated_accepted_value(::skywalker::PaxosValue* accepted_value) {
  delete accepted_value_;
  accepted_value_ = accepted_value;
  if (accepted_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.AcceptorState.accepted_value)
}

inline const AcceptorState* AcceptorState::internal_default_instance() {
  return &AcceptorState_default_instance_.get();
}
// -------------------------------------------------------------------

// MasterState

// optional uint64 version = 1;
inline void MasterState::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MasterState::version() const {
  // @@protoc_insertion_point(field_get:skywalker.MasterState.version)
  return version_;
}
inline void MasterState::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:skywalker.MasterState.version)
}

// optional uint64 node_id = 2;
inline void MasterState::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MasterState::node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.MasterState.node_id)
  return node_id_;
}
inline void MasterState::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.MasterState.node_id)
}

// optional uint64 lease_time = 3;
inline void MasterState::clear_lease_time() {
  lease_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MasterState::lease_time() const {
  // @@protoc_insertion_point(field_get:skywalker.MasterState.lease_time)
  return lease_time_;
}
inline void MasterState::set_lease_time(::google::protobuf::uint64 value) {
  
  lease_time_ = value;
  // @@protoc_insertion_point(field_set:skywalker.MasterState.lease_time)
}

inline const MasterState* MasterState::internal_default_instance() {
  return &MasterState_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skywalker

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::skywalker::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skywalker::MessageType>() {
  return ::skywalker::MessageType_descriptor();
}
template <> struct is_proto_enum< ::skywalker::ContentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skywalker::ContentType>() {
  return ::skywalker::ContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_paxos_2eproto__INCLUDED
