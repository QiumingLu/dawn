// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace skywalker {

namespace {

const ::google::protobuf::Descriptor* PaxosValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaxosValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaxosMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaxosMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPointMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPointMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* Membership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Membership_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptorState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptorState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_paxos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_paxos_2eproto() {
  protobuf_AddDesc_paxos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "paxos.proto");
  GOOGLE_CHECK(file != NULL);
  PaxosValue_descriptor_ = file->message_type(0);
  static const int PaxosValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosValue, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosValue, user_data_),
  };
  PaxosValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PaxosValue_descriptor_,
      PaxosValue::internal_default_instance(),
      PaxosValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(PaxosValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosValue, _internal_metadata_));
  PaxosMessage_descriptor_ = file->message_type(1);
  static const int PaxosMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, proposal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, proposal_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, pre_accepted_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, pre_accepted_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, rejected_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, now_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, value_),
  };
  PaxosMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PaxosMessage_descriptor_,
      PaxosMessage::internal_default_instance(),
      PaxosMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PaxosMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMessage, _internal_metadata_));
  CheckPointMessage_descriptor_ = file->message_type(2);
  static const int CheckPointMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointMessage, type_),
  };
  CheckPointMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckPointMessage_descriptor_,
      CheckPointMessage::internal_default_instance(),
      CheckPointMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckPointMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointMessage, _internal_metadata_));
  Content_descriptor_ = file->message_type(3);
  static const int Content_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, paxos_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, checkpoint_msg_),
  };
  Content_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Content_descriptor_,
      Content::internal_default_instance(),
      Content_offsets_,
      -1,
      -1,
      -1,
      sizeof(Content),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _internal_metadata_));
  Membership_descriptor_ = file->message_type(4);
  static const int Membership_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Membership, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Membership, node_id_),
  };
  Membership_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Membership_descriptor_,
      Membership::internal_default_instance(),
      Membership_offsets_,
      -1,
      -1,
      -1,
      sizeof(Membership),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Membership, _internal_metadata_));
  AcceptorState_descriptor_ = file->message_type(5);
  static const int AcceptorState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, promised_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, promised_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, accepted_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, accepted_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, accepted_value_),
  };
  AcceptorState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcceptorState_descriptor_,
      AcceptorState::internal_default_instance(),
      AcceptorState_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcceptorState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptorState, _internal_metadata_));
  MasterState_descriptor_ = file->message_type(6);
  static const int MasterState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterState, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterState, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterState, lease_time_),
  };
  MasterState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterState_descriptor_,
      MasterState::internal_default_instance(),
      MasterState_offsets_,
      -1,
      -1,
      -1,
      sizeof(MasterState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterState, _internal_metadata_));
  MessageType_descriptor_ = file->enum_type(0);
  ContentType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_paxos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PaxosValue_descriptor_, PaxosValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PaxosMessage_descriptor_, PaxosMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckPointMessage_descriptor_, CheckPointMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Content_descriptor_, Content::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Membership_descriptor_, Membership::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcceptorState_descriptor_, AcceptorState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterState_descriptor_, MasterState::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_paxos_2eproto() {
  PaxosValue_default_instance_.Shutdown();
  delete PaxosValue_reflection_;
  PaxosMessage_default_instance_.Shutdown();
  delete PaxosMessage_reflection_;
  CheckPointMessage_default_instance_.Shutdown();
  delete CheckPointMessage_reflection_;
  Content_default_instance_.Shutdown();
  delete Content_reflection_;
  Membership_default_instance_.Shutdown();
  delete Membership_reflection_;
  AcceptorState_default_instance_.Shutdown();
  delete AcceptorState_reflection_;
  MasterState_default_instance_.Shutdown();
  delete MasterState_reflection_;
}

void protobuf_InitDefaults_paxos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  PaxosValue_default_instance_.DefaultConstruct();
  PaxosMessage_default_instance_.DefaultConstruct();
  CheckPointMessage_default_instance_.DefaultConstruct();
  Content_default_instance_.DefaultConstruct();
  Membership_default_instance_.DefaultConstruct();
  AcceptorState_default_instance_.DefaultConstruct();
  MasterState_default_instance_.DefaultConstruct();
  PaxosValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  PaxosMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckPointMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  Content_default_instance_.get_mutable()->InitAsDefaultInstance();
  Membership_default_instance_.get_mutable()->InitAsDefaultInstance();
  AcceptorState_default_instance_.get_mutable()->InitAsDefaultInstance();
  MasterState_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_paxos_2eproto_once_);
void protobuf_InitDefaults_paxos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_paxos_2eproto_once_,
                 &protobuf_InitDefaults_paxos_2eproto_impl);
}
void protobuf_AddDesc_paxos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_paxos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013paxos.proto\022\tskywalker\"3\n\nPaxosValue\022\022"
    "\n\nmachine_id\030\001 \001(\005\022\021\n\tuser_data\030\002 \001(\014\"\224\002"
    "\n\014PaxosMessage\022$\n\004type\030\001 \001(\0162\026.skywalker"
    ".MessageType\022\017\n\007node_id\030\002 \001(\004\022\023\n\013instanc"
    "e_id\030\003 \001(\004\022\023\n\013proposal_id\030\004 \001(\004\022\030\n\020propo"
    "sal_node_id\030\005 \001(\004\022\027\n\017pre_accepted_id\030\006 \001"
    "(\004\022\034\n\024pre_accepted_node_id\030\007 \001(\004\022\023\n\013reje"
    "cted_id\030\010 \001(\004\022\027\n\017now_instance_id\030\t \001(\004\022$"
    "\n\005value\030\n \001(\0132\025.skywalker.PaxosValue\"9\n\021"
    "CheckPointMessage\022$\n\004type\030\001 \001(\0162\026.skywal"
    "ker.MessageType\"\264\001\n\007Content\022$\n\004type\030\001 \001("
    "\0162\026.skywalker.ContentType\022\020\n\010group_id\030\002 "
    "\001(\r\022\017\n\007version\030\003 \001(\r\022*\n\tpaxos_msg\030\004 \001(\0132"
    "\027.skywalker.PaxosMessage\0224\n\016checkpoint_m"
    "sg\030\005 \001(\0132\034.skywalker.CheckPointMessage\"."
    "\n\nMembership\022\017\n\007version\030\001 \001(\004\022\017\n\007node_id"
    "\030\002 \003(\004\"\261\001\n\rAcceptorState\022\023\n\013instance_id\030"
    "\001 \001(\004\022\023\n\013promised_id\030\002 \001(\004\022\030\n\020promised_n"
    "ode_id\030\003 \001(\004\022\023\n\013accepted_id\030\004 \001(\004\022\030\n\020acc"
    "epted_node_id\030\005 \001(\004\022-\n\016accepted_value\030\006 "
    "\001(\0132\025.skywalker.PaxosValue\"C\n\013MasterStat"
    "e\022\017\n\007version\030\001 \001(\004\022\017\n\007node_id\030\002 \001(\004\022\022\n\nl"
    "ease_time\030\003 \001(\004*\301\001\n\013MessageType\022\013\n\007PREPA"
    "RE\020\000\022\021\n\rPREPARE_REPLY\020\001\022\n\n\006ACCEPT\020\002\022\020\n\014A"
    "CCEPT_REPLY\020\003\022\024\n\020NEW_CHOSEN_VALUE\020\004\022\021\n\rA"
    "SK_FOR_LEARN\020\005\022\026\n\022SEND_LEARNED_VALUE\020\006\022\030"
    "\n\024SEND_NOW_INSTANCE_ID\020\007\022\031\n\025COMFIRM_ASK_"
    "FOR_LEARN\020\010*8\n\013ContentType\022\021\n\rPAXOS_MESS"
    "AGE\020\000\022\026\n\022CHECKPOINT_MESSAGE\020\001b\006proto3", 1157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paxos.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_paxos_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_paxos_2eproto_once_);
void protobuf_AddDesc_paxos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_paxos_2eproto_once_,
                 &protobuf_AddDesc_paxos_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_paxos_2eproto {
  StaticDescriptorInitializer_paxos_2eproto() {
    protobuf_AddDesc_paxos_2eproto();
  }
} static_descriptor_initializer_paxos_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentType_descriptor_;
}
bool ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaxosValue::kMachineIdFieldNumber;
const int PaxosValue::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaxosValue::PaxosValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.PaxosValue)
}

void PaxosValue::InitAsDefaultInstance() {
}

PaxosValue::PaxosValue(const PaxosValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.PaxosValue)
}

void PaxosValue::SharedCtor() {
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_id_ = 0;
  _cached_size_ = 0;
}

PaxosValue::~PaxosValue() {
  // @@protoc_insertion_point(destructor:skywalker.PaxosValue)
  SharedDtor();
}

void PaxosValue::SharedDtor() {
  user_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PaxosValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaxosValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaxosValue_descriptor_;
}

const PaxosValue& PaxosValue::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PaxosValue> PaxosValue_default_instance_;

PaxosValue* PaxosValue::New(::google::protobuf::Arena* arena) const {
  PaxosValue* n = new PaxosValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaxosValue::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.PaxosValue)
  machine_id_ = 0;
  user_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PaxosValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.PaxosValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 machine_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // optional bytes user_data = 2;
      case 2: {
        if (tag == 18) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.PaxosValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.PaxosValue)
  return false;
#undef DO_
}

void PaxosValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.PaxosValue)
  // optional int32 machine_id = 1;
  if (this->machine_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->machine_id(), output);
  }

  // optional bytes user_data = 2;
  if (this->user_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.PaxosValue)
}

::google::protobuf::uint8* PaxosValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.PaxosValue)
  // optional int32 machine_id = 1;
  if (this->machine_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->machine_id(), target);
  }

  // optional bytes user_data = 2;
  if (this->user_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.PaxosValue)
  return target;
}

size_t PaxosValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.PaxosValue)
  size_t total_size = 0;

  // optional int32 machine_id = 1;
  if (this->machine_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_id());
  }

  // optional bytes user_data = 2;
  if (this->user_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaxosValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.PaxosValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PaxosValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaxosValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.PaxosValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.PaxosValue)
    UnsafeMergeFrom(*source);
  }
}

void PaxosValue::MergeFrom(const PaxosValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.PaxosValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PaxosValue::UnsafeMergeFrom(const PaxosValue& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.machine_id() != 0) {
    set_machine_id(from.machine_id());
  }
  if (from.user_data().size() > 0) {

    user_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_data_);
  }
}

void PaxosValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.PaxosValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaxosValue::CopyFrom(const PaxosValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.PaxosValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PaxosValue::IsInitialized() const {

  return true;
}

void PaxosValue::Swap(PaxosValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaxosValue::InternalSwap(PaxosValue* other) {
  std::swap(machine_id_, other->machine_id_);
  user_data_.Swap(&other->user_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaxosValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaxosValue_descriptor_;
  metadata.reflection = PaxosValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaxosValue

// optional int32 machine_id = 1;
void PaxosValue::clear_machine_id() {
  machine_id_ = 0;
}
::google::protobuf::int32 PaxosValue::machine_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosValue.machine_id)
  return machine_id_;
}
void PaxosValue::set_machine_id(::google::protobuf::int32 value) {
  
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosValue.machine_id)
}

// optional bytes user_data = 2;
void PaxosValue::clear_user_data() {
  user_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PaxosValue::user_data() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosValue.user_data)
  return user_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PaxosValue::set_user_data(const ::std::string& value) {
  
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:skywalker.PaxosValue.user_data)
}
void PaxosValue::set_user_data(const char* value) {
  
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:skywalker.PaxosValue.user_data)
}
void PaxosValue::set_user_data(const void* value, size_t size) {
  
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:skywalker.PaxosValue.user_data)
}
::std::string* PaxosValue::mutable_user_data() {
  
  // @@protoc_insertion_point(field_mutable:skywalker.PaxosValue.user_data)
  return user_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PaxosValue::release_user_data() {
  // @@protoc_insertion_point(field_release:skywalker.PaxosValue.user_data)
  
  return user_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PaxosValue::set_allocated_user_data(::std::string* user_data) {
  if (user_data != NULL) {
    
  } else {
    
  }
  user_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_data);
  // @@protoc_insertion_point(field_set_allocated:skywalker.PaxosValue.user_data)
}

inline const PaxosValue* PaxosValue::internal_default_instance() {
  return &PaxosValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaxosMessage::kTypeFieldNumber;
const int PaxosMessage::kNodeIdFieldNumber;
const int PaxosMessage::kInstanceIdFieldNumber;
const int PaxosMessage::kProposalIdFieldNumber;
const int PaxosMessage::kProposalNodeIdFieldNumber;
const int PaxosMessage::kPreAcceptedIdFieldNumber;
const int PaxosMessage::kPreAcceptedNodeIdFieldNumber;
const int PaxosMessage::kRejectedIdFieldNumber;
const int PaxosMessage::kNowInstanceIdFieldNumber;
const int PaxosMessage::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaxosMessage::PaxosMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.PaxosMessage)
}

void PaxosMessage::InitAsDefaultInstance() {
  value_ = const_cast< ::skywalker::PaxosValue*>(
      ::skywalker::PaxosValue::internal_default_instance());
}

PaxosMessage::PaxosMessage(const PaxosMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.PaxosMessage)
}

void PaxosMessage::SharedCtor() {
  value_ = NULL;
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(type_));
  _cached_size_ = 0;
}

PaxosMessage::~PaxosMessage() {
  // @@protoc_insertion_point(destructor:skywalker.PaxosMessage)
  SharedDtor();
}

void PaxosMessage::SharedDtor() {
  if (this != &PaxosMessage_default_instance_.get()) {
    delete value_;
  }
}

void PaxosMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaxosMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaxosMessage_descriptor_;
}

const PaxosMessage& PaxosMessage::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PaxosMessage> PaxosMessage_default_instance_;

PaxosMessage* PaxosMessage::New(::google::protobuf::Arena* arena) const {
  PaxosMessage* n = new PaxosMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaxosMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.PaxosMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PaxosMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PaxosMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, rejected_id_);
  type_ = 0;
  now_instance_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool PaxosMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.PaxosMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .skywalker.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::skywalker::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional uint64 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_instance_id;
        break;
      }

      // optional uint64 instance_id = 3;
      case 3: {
        if (tag == 24) {
         parse_instance_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_proposal_id;
        break;
      }

      // optional uint64 proposal_id = 4;
      case 4: {
        if (tag == 32) {
         parse_proposal_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_proposal_node_id;
        break;
      }

      // optional uint64 proposal_node_id = 5;
      case 5: {
        if (tag == 40) {
         parse_proposal_node_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pre_accepted_id;
        break;
      }

      // optional uint64 pre_accepted_id = 6;
      case 6: {
        if (tag == 48) {
         parse_pre_accepted_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pre_accepted_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pre_accepted_node_id;
        break;
      }

      // optional uint64 pre_accepted_node_id = 7;
      case 7: {
        if (tag == 56) {
         parse_pre_accepted_node_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pre_accepted_node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rejected_id;
        break;
      }

      // optional uint64 rejected_id = 8;
      case 8: {
        if (tag == 64) {
         parse_rejected_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rejected_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_now_instance_id;
        break;
      }

      // optional uint64 now_instance_id = 9;
      case 9: {
        if (tag == 72) {
         parse_now_instance_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &now_instance_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_value;
        break;
      }

      // optional .skywalker.PaxosValue value = 10;
      case 10: {
        if (tag == 82) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.PaxosMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.PaxosMessage)
  return false;
#undef DO_
}

void PaxosMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.PaxosMessage)
  // optional .skywalker.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // optional uint64 instance_id = 3;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instance_id(), output);
  }

  // optional uint64 proposal_id = 4;
  if (this->proposal_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->proposal_id(), output);
  }

  // optional uint64 proposal_node_id = 5;
  if (this->proposal_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->proposal_node_id(), output);
  }

  // optional uint64 pre_accepted_id = 6;
  if (this->pre_accepted_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pre_accepted_id(), output);
  }

  // optional uint64 pre_accepted_node_id = 7;
  if (this->pre_accepted_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pre_accepted_node_id(), output);
  }

  // optional uint64 rejected_id = 8;
  if (this->rejected_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->rejected_id(), output);
  }

  // optional uint64 now_instance_id = 9;
  if (this->now_instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->now_instance_id(), output);
  }

  // optional .skywalker.PaxosValue value = 10;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.PaxosMessage)
}

::google::protobuf::uint8* PaxosMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.PaxosMessage)
  // optional .skywalker.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // optional uint64 instance_id = 3;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instance_id(), target);
  }

  // optional uint64 proposal_id = 4;
  if (this->proposal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->proposal_id(), target);
  }

  // optional uint64 proposal_node_id = 5;
  if (this->proposal_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->proposal_node_id(), target);
  }

  // optional uint64 pre_accepted_id = 6;
  if (this->pre_accepted_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pre_accepted_id(), target);
  }

  // optional uint64 pre_accepted_node_id = 7;
  if (this->pre_accepted_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pre_accepted_node_id(), target);
  }

  // optional uint64 rejected_id = 8;
  if (this->rejected_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->rejected_id(), target);
  }

  // optional uint64 now_instance_id = 9;
  if (this->now_instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->now_instance_id(), target);
  }

  // optional .skywalker.PaxosValue value = 10;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.PaxosMessage)
  return target;
}

size_t PaxosMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.PaxosMessage)
  size_t total_size = 0;

  // optional .skywalker.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // optional uint64 instance_id = 3;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instance_id());
  }

  // optional uint64 proposal_id = 4;
  if (this->proposal_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposal_id());
  }

  // optional uint64 proposal_node_id = 5;
  if (this->proposal_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposal_node_id());
  }

  // optional uint64 pre_accepted_id = 6;
  if (this->pre_accepted_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pre_accepted_id());
  }

  // optional uint64 pre_accepted_node_id = 7;
  if (this->pre_accepted_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pre_accepted_node_id());
  }

  // optional uint64 rejected_id = 8;
  if (this->rejected_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rejected_id());
  }

  // optional uint64 now_instance_id = 9;
  if (this->now_instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->now_instance_id());
  }

  // optional .skywalker.PaxosValue value = 10;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaxosMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.PaxosMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PaxosMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaxosMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.PaxosMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.PaxosMessage)
    UnsafeMergeFrom(*source);
  }
}

void PaxosMessage::MergeFrom(const PaxosMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.PaxosMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PaxosMessage::UnsafeMergeFrom(const PaxosMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.proposal_id() != 0) {
    set_proposal_id(from.proposal_id());
  }
  if (from.proposal_node_id() != 0) {
    set_proposal_node_id(from.proposal_node_id());
  }
  if (from.pre_accepted_id() != 0) {
    set_pre_accepted_id(from.pre_accepted_id());
  }
  if (from.pre_accepted_node_id() != 0) {
    set_pre_accepted_node_id(from.pre_accepted_node_id());
  }
  if (from.rejected_id() != 0) {
    set_rejected_id(from.rejected_id());
  }
  if (from.now_instance_id() != 0) {
    set_now_instance_id(from.now_instance_id());
  }
  if (from.has_value()) {
    mutable_value()->::skywalker::PaxosValue::MergeFrom(from.value());
  }
}

void PaxosMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.PaxosMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaxosMessage::CopyFrom(const PaxosMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.PaxosMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PaxosMessage::IsInitialized() const {

  return true;
}

void PaxosMessage::Swap(PaxosMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaxosMessage::InternalSwap(PaxosMessage* other) {
  std::swap(type_, other->type_);
  std::swap(node_id_, other->node_id_);
  std::swap(instance_id_, other->instance_id_);
  std::swap(proposal_id_, other->proposal_id_);
  std::swap(proposal_node_id_, other->proposal_node_id_);
  std::swap(pre_accepted_id_, other->pre_accepted_id_);
  std::swap(pre_accepted_node_id_, other->pre_accepted_node_id_);
  std::swap(rejected_id_, other->rejected_id_);
  std::swap(now_instance_id_, other->now_instance_id_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaxosMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaxosMessage_descriptor_;
  metadata.reflection = PaxosMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaxosMessage

// optional .skywalker.MessageType type = 1;
void PaxosMessage::clear_type() {
  type_ = 0;
}
::skywalker::MessageType PaxosMessage::type() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.type)
  return static_cast< ::skywalker::MessageType >(type_);
}
void PaxosMessage::set_type(::skywalker::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.type)
}

// optional uint64 node_id = 2;
void PaxosMessage::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.node_id)
  return node_id_;
}
void PaxosMessage::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.node_id)
}

// optional uint64 instance_id = 3;
void PaxosMessage::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::instance_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.instance_id)
  return instance_id_;
}
void PaxosMessage::set_instance_id(::google::protobuf::uint64 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.instance_id)
}

// optional uint64 proposal_id = 4;
void PaxosMessage::clear_proposal_id() {
  proposal_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::proposal_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.proposal_id)
  return proposal_id_;
}
void PaxosMessage::set_proposal_id(::google::protobuf::uint64 value) {
  
  proposal_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.proposal_id)
}

// optional uint64 proposal_node_id = 5;
void PaxosMessage::clear_proposal_node_id() {
  proposal_node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::proposal_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.proposal_node_id)
  return proposal_node_id_;
}
void PaxosMessage::set_proposal_node_id(::google::protobuf::uint64 value) {
  
  proposal_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.proposal_node_id)
}

// optional uint64 pre_accepted_id = 6;
void PaxosMessage::clear_pre_accepted_id() {
  pre_accepted_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::pre_accepted_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.pre_accepted_id)
  return pre_accepted_id_;
}
void PaxosMessage::set_pre_accepted_id(::google::protobuf::uint64 value) {
  
  pre_accepted_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.pre_accepted_id)
}

// optional uint64 pre_accepted_node_id = 7;
void PaxosMessage::clear_pre_accepted_node_id() {
  pre_accepted_node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::pre_accepted_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.pre_accepted_node_id)
  return pre_accepted_node_id_;
}
void PaxosMessage::set_pre_accepted_node_id(::google::protobuf::uint64 value) {
  
  pre_accepted_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.pre_accepted_node_id)
}

// optional uint64 rejected_id = 8;
void PaxosMessage::clear_rejected_id() {
  rejected_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::rejected_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.rejected_id)
  return rejected_id_;
}
void PaxosMessage::set_rejected_id(::google::protobuf::uint64 value) {
  
  rejected_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.rejected_id)
}

// optional uint64 now_instance_id = 9;
void PaxosMessage::clear_now_instance_id() {
  now_instance_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PaxosMessage::now_instance_id() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.now_instance_id)
  return now_instance_id_;
}
void PaxosMessage::set_now_instance_id(::google::protobuf::uint64 value) {
  
  now_instance_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.PaxosMessage.now_instance_id)
}

// optional .skywalker.PaxosValue value = 10;
bool PaxosMessage::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void PaxosMessage::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::skywalker::PaxosValue& PaxosMessage::value() const {
  // @@protoc_insertion_point(field_get:skywalker.PaxosMessage.value)
  return value_ != NULL ? *value_
                         : *::skywalker::PaxosValue::internal_default_instance();
}
::skywalker::PaxosValue* PaxosMessage::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::skywalker::PaxosValue;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.PaxosMessage.value)
  return value_;
}
::skywalker::PaxosValue* PaxosMessage::release_value() {
  // @@protoc_insertion_point(field_release:skywalker.PaxosMessage.value)
  
  ::skywalker::PaxosValue* temp = value_;
  value_ = NULL;
  return temp;
}
void PaxosMessage::set_allocated_value(::skywalker::PaxosValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.PaxosMessage.value)
}

inline const PaxosMessage* PaxosMessage::internal_default_instance() {
  return &PaxosMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckPointMessage::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckPointMessage::CheckPointMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.CheckPointMessage)
}

void CheckPointMessage::InitAsDefaultInstance() {
}

CheckPointMessage::CheckPointMessage(const CheckPointMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.CheckPointMessage)
}

void CheckPointMessage::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

CheckPointMessage::~CheckPointMessage() {
  // @@protoc_insertion_point(destructor:skywalker.CheckPointMessage)
  SharedDtor();
}

void CheckPointMessage::SharedDtor() {
}

void CheckPointMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPointMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPointMessage_descriptor_;
}

const CheckPointMessage& CheckPointMessage::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckPointMessage> CheckPointMessage_default_instance_;

CheckPointMessage* CheckPointMessage::New(::google::protobuf::Arena* arena) const {
  CheckPointMessage* n = new CheckPointMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckPointMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.CheckPointMessage)
  type_ = 0;
}

bool CheckPointMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.CheckPointMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .skywalker.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::skywalker::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.CheckPointMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.CheckPointMessage)
  return false;
#undef DO_
}

void CheckPointMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.CheckPointMessage)
  // optional .skywalker.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.CheckPointMessage)
}

::google::protobuf::uint8* CheckPointMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.CheckPointMessage)
  // optional .skywalker.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.CheckPointMessage)
  return target;
}

size_t CheckPointMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.CheckPointMessage)
  size_t total_size = 0;

  // optional .skywalker.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPointMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.CheckPointMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckPointMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckPointMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.CheckPointMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.CheckPointMessage)
    UnsafeMergeFrom(*source);
  }
}

void CheckPointMessage::MergeFrom(const CheckPointMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.CheckPointMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckPointMessage::UnsafeMergeFrom(const CheckPointMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CheckPointMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.CheckPointMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPointMessage::CopyFrom(const CheckPointMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.CheckPointMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckPointMessage::IsInitialized() const {

  return true;
}

void CheckPointMessage::Swap(CheckPointMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckPointMessage::InternalSwap(CheckPointMessage* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckPointMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPointMessage_descriptor_;
  metadata.reflection = CheckPointMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckPointMessage

// optional .skywalker.MessageType type = 1;
void CheckPointMessage::clear_type() {
  type_ = 0;
}
::skywalker::MessageType CheckPointMessage::type() const {
  // @@protoc_insertion_point(field_get:skywalker.CheckPointMessage.type)
  return static_cast< ::skywalker::MessageType >(type_);
}
void CheckPointMessage::set_type(::skywalker::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:skywalker.CheckPointMessage.type)
}

inline const CheckPointMessage* CheckPointMessage::internal_default_instance() {
  return &CheckPointMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Content::kTypeFieldNumber;
const int Content::kGroupIdFieldNumber;
const int Content::kVersionFieldNumber;
const int Content::kPaxosMsgFieldNumber;
const int Content::kCheckpointMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Content::Content()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.Content)
}

void Content::InitAsDefaultInstance() {
  paxos_msg_ = const_cast< ::skywalker::PaxosMessage*>(
      ::skywalker::PaxosMessage::internal_default_instance());
  checkpoint_msg_ = const_cast< ::skywalker::CheckPointMessage*>(
      ::skywalker::CheckPointMessage::internal_default_instance());
}

Content::Content(const Content& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.Content)
}

void Content::SharedCtor() {
  paxos_msg_ = NULL;
  checkpoint_msg_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_) + sizeof(version_));
  _cached_size_ = 0;
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:skywalker.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (this != &Content_default_instance_.get()) {
    delete paxos_msg_;
    delete checkpoint_msg_;
  }
}

void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_descriptor_;
}

const Content& Content::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Content> Content_default_instance_;

Content* Content::New(::google::protobuf::Arena* arena) const {
  Content* n = new Content;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.Content)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Content, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Content*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, version_);
  if (GetArenaNoVirtual() == NULL && paxos_msg_ != NULL) delete paxos_msg_;
  paxos_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && checkpoint_msg_ != NULL) delete checkpoint_msg_;
  checkpoint_msg_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .skywalker.ContentType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::skywalker::ContentType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_paxos_msg;
        break;
      }

      // optional .skywalker.PaxosMessage paxos_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_paxos_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paxos_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_checkpoint_msg;
        break;
      }

      // optional .skywalker.CheckPointMessage checkpoint_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_checkpoint_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkpoint_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.Content)
  return false;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.Content)
  // optional .skywalker.ContentType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional .skywalker.PaxosMessage paxos_msg = 4;
  if (this->has_paxos_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->paxos_msg_, output);
  }

  // optional .skywalker.CheckPointMessage checkpoint_msg = 5;
  if (this->has_checkpoint_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->checkpoint_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.Content)
}

::google::protobuf::uint8* Content::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.Content)
  // optional .skywalker.ContentType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // optional .skywalker.PaxosMessage paxos_msg = 4;
  if (this->has_paxos_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->paxos_msg_, false, target);
  }

  // optional .skywalker.CheckPointMessage checkpoint_msg = 5;
  if (this->has_checkpoint_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->checkpoint_msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.Content)
  size_t total_size = 0;

  // optional .skywalker.ContentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional .skywalker.PaxosMessage paxos_msg = 4;
  if (this->has_paxos_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paxos_msg_);
  }

  // optional .skywalker.CheckPointMessage checkpoint_msg = 5;
  if (this->has_checkpoint_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->checkpoint_msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.Content)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Content* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Content>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.Content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.Content)
    UnsafeMergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.Content)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Content::UnsafeMergeFrom(const Content& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.has_paxos_msg()) {
    mutable_paxos_msg()->::skywalker::PaxosMessage::MergeFrom(from.paxos_msg());
  }
  if (from.has_checkpoint_msg()) {
    mutable_checkpoint_msg()->::skywalker::CheckPointMessage::MergeFrom(from.checkpoint_msg());
  }
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.Content)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Content::IsInitialized() const {

  return true;
}

void Content::Swap(Content* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Content::InternalSwap(Content* other) {
  std::swap(type_, other->type_);
  std::swap(group_id_, other->group_id_);
  std::swap(version_, other->version_);
  std::swap(paxos_msg_, other->paxos_msg_);
  std::swap(checkpoint_msg_, other->checkpoint_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_descriptor_;
  metadata.reflection = Content_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Content

// optional .skywalker.ContentType type = 1;
void Content::clear_type() {
  type_ = 0;
}
::skywalker::ContentType Content::type() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.type)
  return static_cast< ::skywalker::ContentType >(type_);
}
void Content::set_type(::skywalker::ContentType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Content.type)
}

// optional uint32 group_id = 2;
void Content::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 Content::group_id() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.group_id)
  return group_id_;
}
void Content::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Content.group_id)
}

// optional uint32 version = 3;
void Content::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 Content::version() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.version)
  return version_;
}
void Content::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Content.version)
}

// optional .skywalker.PaxosMessage paxos_msg = 4;
bool Content::has_paxos_msg() const {
  return this != internal_default_instance() && paxos_msg_ != NULL;
}
void Content::clear_paxos_msg() {
  if (GetArenaNoVirtual() == NULL && paxos_msg_ != NULL) delete paxos_msg_;
  paxos_msg_ = NULL;
}
const ::skywalker::PaxosMessage& Content::paxos_msg() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.paxos_msg)
  return paxos_msg_ != NULL ? *paxos_msg_
                         : *::skywalker::PaxosMessage::internal_default_instance();
}
::skywalker::PaxosMessage* Content::mutable_paxos_msg() {
  
  if (paxos_msg_ == NULL) {
    paxos_msg_ = new ::skywalker::PaxosMessage;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.Content.paxos_msg)
  return paxos_msg_;
}
::skywalker::PaxosMessage* Content::release_paxos_msg() {
  // @@protoc_insertion_point(field_release:skywalker.Content.paxos_msg)
  
  ::skywalker::PaxosMessage* temp = paxos_msg_;
  paxos_msg_ = NULL;
  return temp;
}
void Content::set_allocated_paxos_msg(::skywalker::PaxosMessage* paxos_msg) {
  delete paxos_msg_;
  paxos_msg_ = paxos_msg;
  if (paxos_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.Content.paxos_msg)
}

// optional .skywalker.CheckPointMessage checkpoint_msg = 5;
bool Content::has_checkpoint_msg() const {
  return this != internal_default_instance() && checkpoint_msg_ != NULL;
}
void Content::clear_checkpoint_msg() {
  if (GetArenaNoVirtual() == NULL && checkpoint_msg_ != NULL) delete checkpoint_msg_;
  checkpoint_msg_ = NULL;
}
const ::skywalker::CheckPointMessage& Content::checkpoint_msg() const {
  // @@protoc_insertion_point(field_get:skywalker.Content.checkpoint_msg)
  return checkpoint_msg_ != NULL ? *checkpoint_msg_
                         : *::skywalker::CheckPointMessage::internal_default_instance();
}
::skywalker::CheckPointMessage* Content::mutable_checkpoint_msg() {
  
  if (checkpoint_msg_ == NULL) {
    checkpoint_msg_ = new ::skywalker::CheckPointMessage;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.Content.checkpoint_msg)
  return checkpoint_msg_;
}
::skywalker::CheckPointMessage* Content::release_checkpoint_msg() {
  // @@protoc_insertion_point(field_release:skywalker.Content.checkpoint_msg)
  
  ::skywalker::CheckPointMessage* temp = checkpoint_msg_;
  checkpoint_msg_ = NULL;
  return temp;
}
void Content::set_allocated_checkpoint_msg(::skywalker::CheckPointMessage* checkpoint_msg) {
  delete checkpoint_msg_;
  checkpoint_msg_ = checkpoint_msg;
  if (checkpoint_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.Content.checkpoint_msg)
}

inline const Content* Content::internal_default_instance() {
  return &Content_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Membership::kVersionFieldNumber;
const int Membership::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Membership::Membership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.Membership)
}

void Membership::InitAsDefaultInstance() {
}

Membership::Membership(const Membership& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.Membership)
}

void Membership::SharedCtor() {
  version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Membership::~Membership() {
  // @@protoc_insertion_point(destructor:skywalker.Membership)
  SharedDtor();
}

void Membership::SharedDtor() {
}

void Membership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Membership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Membership_descriptor_;
}

const Membership& Membership::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Membership> Membership_default_instance_;

Membership* Membership::New(::google::protobuf::Arena* arena) const {
  Membership* n = new Membership;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Membership::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.Membership)
  version_ = GOOGLE_ULONGLONG(0);
  node_id_.Clear();
}

bool Membership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.Membership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_id;
        break;
      }

      // repeated uint64 node_id = 2;
      case 2: {
        if (tag == 18) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_node_id())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_node_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.Membership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.Membership)
  return false;
#undef DO_
}

void Membership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.Membership)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // repeated uint64 node_id = 2;
  if (this->node_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_node_id_cached_byte_size_);
  }
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->node_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.Membership)
}

::google::protobuf::uint8* Membership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.Membership)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // repeated uint64 node_id = 2;
  if (this->node_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _node_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->node_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->node_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.Membership)
  return target;
}

size_t Membership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.Membership)
  size_t total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // repeated uint64 node_id = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->node_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->node_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _node_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Membership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.Membership)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Membership* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Membership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.Membership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.Membership)
    UnsafeMergeFrom(*source);
  }
}

void Membership::MergeFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.Membership)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Membership::UnsafeMergeFrom(const Membership& from) {
  GOOGLE_DCHECK(&from != this);
  node_id_.UnsafeMergeFrom(from.node_id_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Membership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Membership::CopyFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.Membership)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Membership::IsInitialized() const {

  return true;
}

void Membership::Swap(Membership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Membership::InternalSwap(Membership* other) {
  std::swap(version_, other->version_);
  node_id_.UnsafeArenaSwap(&other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Membership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Membership_descriptor_;
  metadata.reflection = Membership_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Membership

// optional uint64 version = 1;
void Membership::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Membership::version() const {
  // @@protoc_insertion_point(field_get:skywalker.Membership.version)
  return version_;
}
void Membership::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:skywalker.Membership.version)
}

// repeated uint64 node_id = 2;
int Membership::node_id_size() const {
  return node_id_.size();
}
void Membership::clear_node_id() {
  node_id_.Clear();
}
::google::protobuf::uint64 Membership::node_id(int index) const {
  // @@protoc_insertion_point(field_get:skywalker.Membership.node_id)
  return node_id_.Get(index);
}
void Membership::set_node_id(int index, ::google::protobuf::uint64 value) {
  node_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:skywalker.Membership.node_id)
}
void Membership::add_node_id(::google::protobuf::uint64 value) {
  node_id_.Add(value);
  // @@protoc_insertion_point(field_add:skywalker.Membership.node_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Membership::node_id() const {
  // @@protoc_insertion_point(field_list:skywalker.Membership.node_id)
  return node_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Membership::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable_list:skywalker.Membership.node_id)
  return &node_id_;
}

inline const Membership* Membership::internal_default_instance() {
  return &Membership_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptorState::kInstanceIdFieldNumber;
const int AcceptorState::kPromisedIdFieldNumber;
const int AcceptorState::kPromisedNodeIdFieldNumber;
const int AcceptorState::kAcceptedIdFieldNumber;
const int AcceptorState::kAcceptedNodeIdFieldNumber;
const int AcceptorState::kAcceptedValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptorState::AcceptorState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.AcceptorState)
}

void AcceptorState::InitAsDefaultInstance() {
  accepted_value_ = const_cast< ::skywalker::PaxosValue*>(
      ::skywalker::PaxosValue::internal_default_instance());
}

AcceptorState::AcceptorState(const AcceptorState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.AcceptorState)
}

void AcceptorState::SharedCtor() {
  accepted_value_ = NULL;
  ::memset(&instance_id_, 0, reinterpret_cast<char*>(&accepted_node_id_) -
    reinterpret_cast<char*>(&instance_id_) + sizeof(accepted_node_id_));
  _cached_size_ = 0;
}

AcceptorState::~AcceptorState() {
  // @@protoc_insertion_point(destructor:skywalker.AcceptorState)
  SharedDtor();
}

void AcceptorState::SharedDtor() {
  if (this != &AcceptorState_default_instance_.get()) {
    delete accepted_value_;
  }
}

void AcceptorState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptorState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptorState_descriptor_;
}

const AcceptorState& AcceptorState::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AcceptorState> AcceptorState_default_instance_;

AcceptorState* AcceptorState::New(::google::protobuf::Arena* arena) const {
  AcceptorState* n = new AcceptorState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptorState::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.AcceptorState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AcceptorState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AcceptorState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instance_id_, accepted_node_id_);
  if (GetArenaNoVirtual() == NULL && accepted_value_ != NULL) delete accepted_value_;
  accepted_value_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool AcceptorState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.AcceptorState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instance_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_promised_id;
        break;
      }

      // optional uint64 promised_id = 2;
      case 2: {
        if (tag == 16) {
         parse_promised_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &promised_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_promised_node_id;
        break;
      }

      // optional uint64 promised_node_id = 3;
      case 3: {
        if (tag == 24) {
         parse_promised_node_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &promised_node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accepted_id;
        break;
      }

      // optional uint64 accepted_id = 4;
      case 4: {
        if (tag == 32) {
         parse_accepted_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepted_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_accepted_node_id;
        break;
      }

      // optional uint64 accepted_node_id = 5;
      case 5: {
        if (tag == 40) {
         parse_accepted_node_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepted_node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_accepted_value;
        break;
      }

      // optional .skywalker.PaxosValue accepted_value = 6;
      case 6: {
        if (tag == 50) {
         parse_accepted_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepted_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.AcceptorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.AcceptorState)
  return false;
#undef DO_
}

void AcceptorState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.AcceptorState)
  // optional uint64 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instance_id(), output);
  }

  // optional uint64 promised_id = 2;
  if (this->promised_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->promised_id(), output);
  }

  // optional uint64 promised_node_id = 3;
  if (this->promised_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->promised_node_id(), output);
  }

  // optional uint64 accepted_id = 4;
  if (this->accepted_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accepted_id(), output);
  }

  // optional uint64 accepted_node_id = 5;
  if (this->accepted_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->accepted_node_id(), output);
  }

  // optional .skywalker.PaxosValue accepted_value = 6;
  if (this->has_accepted_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->accepted_value_, output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.AcceptorState)
}

::google::protobuf::uint8* AcceptorState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.AcceptorState)
  // optional uint64 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instance_id(), target);
  }

  // optional uint64 promised_id = 2;
  if (this->promised_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->promised_id(), target);
  }

  // optional uint64 promised_node_id = 3;
  if (this->promised_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->promised_node_id(), target);
  }

  // optional uint64 accepted_id = 4;
  if (this->accepted_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accepted_id(), target);
  }

  // optional uint64 accepted_node_id = 5;
  if (this->accepted_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->accepted_node_id(), target);
  }

  // optional .skywalker.PaxosValue accepted_value = 6;
  if (this->has_accepted_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->accepted_value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.AcceptorState)
  return target;
}

size_t AcceptorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.AcceptorState)
  size_t total_size = 0;

  // optional uint64 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instance_id());
  }

  // optional uint64 promised_id = 2;
  if (this->promised_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->promised_id());
  }

  // optional uint64 promised_node_id = 3;
  if (this->promised_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->promised_node_id());
  }

  // optional uint64 accepted_id = 4;
  if (this->accepted_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accepted_id());
  }

  // optional uint64 accepted_node_id = 5;
  if (this->accepted_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accepted_node_id());
  }

  // optional .skywalker.PaxosValue accepted_value = 6;
  if (this->has_accepted_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accepted_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptorState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.AcceptorState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcceptorState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptorState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.AcceptorState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.AcceptorState)
    UnsafeMergeFrom(*source);
  }
}

void AcceptorState::MergeFrom(const AcceptorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.AcceptorState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AcceptorState::UnsafeMergeFrom(const AcceptorState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.promised_id() != 0) {
    set_promised_id(from.promised_id());
  }
  if (from.promised_node_id() != 0) {
    set_promised_node_id(from.promised_node_id());
  }
  if (from.accepted_id() != 0) {
    set_accepted_id(from.accepted_id());
  }
  if (from.accepted_node_id() != 0) {
    set_accepted_node_id(from.accepted_node_id());
  }
  if (from.has_accepted_value()) {
    mutable_accepted_value()->::skywalker::PaxosValue::MergeFrom(from.accepted_value());
  }
}

void AcceptorState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.AcceptorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptorState::CopyFrom(const AcceptorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.AcceptorState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AcceptorState::IsInitialized() const {

  return true;
}

void AcceptorState::Swap(AcceptorState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptorState::InternalSwap(AcceptorState* other) {
  std::swap(instance_id_, other->instance_id_);
  std::swap(promised_id_, other->promised_id_);
  std::swap(promised_node_id_, other->promised_node_id_);
  std::swap(accepted_id_, other->accepted_id_);
  std::swap(accepted_node_id_, other->accepted_node_id_);
  std::swap(accepted_value_, other->accepted_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptorState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptorState_descriptor_;
  metadata.reflection = AcceptorState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptorState

// optional uint64 instance_id = 1;
void AcceptorState::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AcceptorState::instance_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.instance_id)
  return instance_id_;
}
void AcceptorState::set_instance_id(::google::protobuf::uint64 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.instance_id)
}

// optional uint64 promised_id = 2;
void AcceptorState::clear_promised_id() {
  promised_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AcceptorState::promised_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.promised_id)
  return promised_id_;
}
void AcceptorState::set_promised_id(::google::protobuf::uint64 value) {
  
  promised_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.promised_id)
}

// optional uint64 promised_node_id = 3;
void AcceptorState::clear_promised_node_id() {
  promised_node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AcceptorState::promised_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.promised_node_id)
  return promised_node_id_;
}
void AcceptorState::set_promised_node_id(::google::protobuf::uint64 value) {
  
  promised_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.promised_node_id)
}

// optional uint64 accepted_id = 4;
void AcceptorState::clear_accepted_id() {
  accepted_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AcceptorState::accepted_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.accepted_id)
  return accepted_id_;
}
void AcceptorState::set_accepted_id(::google::protobuf::uint64 value) {
  
  accepted_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.accepted_id)
}

// optional uint64 accepted_node_id = 5;
void AcceptorState::clear_accepted_node_id() {
  accepted_node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AcceptorState::accepted_node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.accepted_node_id)
  return accepted_node_id_;
}
void AcceptorState::set_accepted_node_id(::google::protobuf::uint64 value) {
  
  accepted_node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.AcceptorState.accepted_node_id)
}

// optional .skywalker.PaxosValue accepted_value = 6;
bool AcceptorState::has_accepted_value() const {
  return this != internal_default_instance() && accepted_value_ != NULL;
}
void AcceptorState::clear_accepted_value() {
  if (GetArenaNoVirtual() == NULL && accepted_value_ != NULL) delete accepted_value_;
  accepted_value_ = NULL;
}
const ::skywalker::PaxosValue& AcceptorState::accepted_value() const {
  // @@protoc_insertion_point(field_get:skywalker.AcceptorState.accepted_value)
  return accepted_value_ != NULL ? *accepted_value_
                         : *::skywalker::PaxosValue::internal_default_instance();
}
::skywalker::PaxosValue* AcceptorState::mutable_accepted_value() {
  
  if (accepted_value_ == NULL) {
    accepted_value_ = new ::skywalker::PaxosValue;
  }
  // @@protoc_insertion_point(field_mutable:skywalker.AcceptorState.accepted_value)
  return accepted_value_;
}
::skywalker::PaxosValue* AcceptorState::release_accepted_value() {
  // @@protoc_insertion_point(field_release:skywalker.AcceptorState.accepted_value)
  
  ::skywalker::PaxosValue* temp = accepted_value_;
  accepted_value_ = NULL;
  return temp;
}
void AcceptorState::set_allocated_accepted_value(::skywalker::PaxosValue* accepted_value) {
  delete accepted_value_;
  accepted_value_ = accepted_value;
  if (accepted_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:skywalker.AcceptorState.accepted_value)
}

inline const AcceptorState* AcceptorState::internal_default_instance() {
  return &AcceptorState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterState::kVersionFieldNumber;
const int MasterState::kNodeIdFieldNumber;
const int MasterState::kLeaseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterState::MasterState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_paxos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:skywalker.MasterState)
}

void MasterState::InitAsDefaultInstance() {
}

MasterState::MasterState(const MasterState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:skywalker.MasterState)
}

void MasterState::SharedCtor() {
  ::memset(&version_, 0, reinterpret_cast<char*>(&lease_time_) -
    reinterpret_cast<char*>(&version_) + sizeof(lease_time_));
  _cached_size_ = 0;
}

MasterState::~MasterState() {
  // @@protoc_insertion_point(destructor:skywalker.MasterState)
  SharedDtor();
}

void MasterState::SharedDtor() {
}

void MasterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterState_descriptor_;
}

const MasterState& MasterState::default_instance() {
  protobuf_InitDefaults_paxos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MasterState> MasterState_default_instance_;

MasterState* MasterState::New(::google::protobuf::Arena* arena) const {
  MasterState* n = new MasterState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterState::Clear() {
// @@protoc_insertion_point(message_clear_start:skywalker.MasterState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MasterState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MasterState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, lease_time_);

#undef ZR_HELPER_
#undef ZR_

}

bool MasterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:skywalker.MasterState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional uint64 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lease_time;
        break;
      }

      // optional uint64 lease_time = 3;
      case 3: {
        if (tag == 24) {
         parse_lease_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lease_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:skywalker.MasterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:skywalker.MasterState)
  return false;
#undef DO_
}

void MasterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:skywalker.MasterState)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // optional uint64 lease_time = 3;
  if (this->lease_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lease_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:skywalker.MasterState)
}

::google::protobuf::uint8* MasterState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:skywalker.MasterState)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // optional uint64 lease_time = 3;
  if (this->lease_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lease_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:skywalker.MasterState)
  return target;
}

size_t MasterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skywalker.MasterState)
  size_t total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // optional uint64 lease_time = 3;
  if (this->lease_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lease_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skywalker.MasterState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MasterState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skywalker.MasterState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skywalker.MasterState)
    UnsafeMergeFrom(*source);
  }
}

void MasterState::MergeFrom(const MasterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skywalker.MasterState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MasterState::UnsafeMergeFrom(const MasterState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.lease_time() != 0) {
    set_lease_time(from.lease_time());
  }
}

void MasterState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skywalker.MasterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterState::CopyFrom(const MasterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skywalker.MasterState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MasterState::IsInitialized() const {

  return true;
}

void MasterState::Swap(MasterState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterState::InternalSwap(MasterState* other) {
  std::swap(version_, other->version_);
  std::swap(node_id_, other->node_id_);
  std::swap(lease_time_, other->lease_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterState_descriptor_;
  metadata.reflection = MasterState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterState

// optional uint64 version = 1;
void MasterState::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MasterState::version() const {
  // @@protoc_insertion_point(field_get:skywalker.MasterState.version)
  return version_;
}
void MasterState::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:skywalker.MasterState.version)
}

// optional uint64 node_id = 2;
void MasterState::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MasterState::node_id() const {
  // @@protoc_insertion_point(field_get:skywalker.MasterState.node_id)
  return node_id_;
}
void MasterState::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:skywalker.MasterState.node_id)
}

// optional uint64 lease_time = 3;
void MasterState::clear_lease_time() {
  lease_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MasterState::lease_time() const {
  // @@protoc_insertion_point(field_get:skywalker.MasterState.lease_time)
  return lease_time_;
}
void MasterState::set_lease_time(::google::protobuf::uint64 value) {
  
  lease_time_ = value;
  // @@protoc_insertion_point(field_set:skywalker.MasterState.lease_time)
}

inline const MasterState* MasterState::internal_default_instance() {
  return &MasterState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace skywalker

// @@protoc_insertion_point(global_scope)
